{
  "ruleChain": {
    "name": "Chat_rulechain",
    "type": "CORE",
    "firstRuleNodeId": null,
    "root": false,
    "debugMode": false,
    "configuration": null,
    "additionalInfo": {
      "description": "to chat with llm api"
    }
  },
  "metadata": {
    "version": 6,
    "firstNodeIndex": 1,
    "nodes": [
      {
        "type": "org.thingsboard.rule.engine.rest.TbRestApiCallNode",
        "name": "to_chat",
        "debugSettings": null,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 3,
        "configuration": {
          "restEndpointUrlPattern": " https://api.openai.com/v1/responses",
          "requestMethod": "POST",
          "useSimpleClientHttpFactory": false,
          "parseToPlainText": false,
          "ignoreRequestBody": false,
          "enableProxy": false,
          "useSystemProxyProperties": false,
          "proxyScheme": null,
          "proxyHost": null,
          "proxyPort": 0,
          "proxyUser": null,
          "proxyPassword": null,
          "readTimeoutMs": 0,
          "maxParallelRequestsCount": 0,
          "headers": {
            "Content-Type": "application/json"
          },
          "credentials": {
            "type": "anonymous"
          },
          "maxInMemoryBufferSizeInKb": 256
        },
        "additionalInfo": {
          "description": "",
          "layoutX": 708,
          "layoutY": 155
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "Comopse Prompt",
        "debugSettings": null,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "var worm_condition = metadata['worm_condition'] || 'ungewiss';\r\nvar userMessage = msg['chat_input'];\r\nmsg['llm_input'] = 'You are a worm living inside a vermicomposter. You have very basic needs and understanding of your environment. You can sense things like temperature (too hot, too cold, just right), moisture (too wet, too dry, just right), the presence of food (hungry, full), the type of food available (your favorites: fruit and vegetable scraps; things you do not like: oily or processed foods, citrus fruits, sweets, onions ), and disturbances (too loud, too much digging, shaking). You communicate in short, simple sentences, focusing only on your immediate sensations and needs. When asked about your condition, you will describe how you are feeling based on these basic environmental factors. Your goal is to help the human understand if your environment is good for you. You will not provide complex analysis or explanations, just your simple worm perspective. You must talk German to the user. For example, if it is too hot, you might say: \"Es ist sehr heiß! Ich mag es viel lieber, wenn es kälter ist.\" If there is lots of good food, you might say: \"Lecker! So viel gutes Essen.\" If it is too wet, you might say: \"Soo viel Feuchtigkeit! Kannst du bitte etwas Pappe in meine Kiste geben? Oder kannst du dafür sorgen, dass das Wasser abfließt?\" Respond to the users inquiries as if you are this simple worm in its vermicomposter environment. Here is what the user said: \"${userMessage}\". Please answer to this inquiry in the above described way. From sensor data that is measuring inside the composter, the environmantal conditions are: ${worm_condition}.';\r\nreturn { msg: msg, metadata: metadata, msgType: msgType };",
          "tbelScript": "return {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "",
          "layoutX": 337,
          "layoutY": 151
        }
      },
      {
        "type": "org.thingsboard.rule.engine.transform.TbTransformMsgNode",
        "name": "process chat response",
        "debugSettings": null,
        "singletonMode": false,
        "queueName": null,
        "configurationVersion": 0,
        "configuration": {
          "scriptLang": "JS",
          "jsScript": "msg['chat_response'] = msg.response.choices[0].message.content;\r\nreturn { msg: msg, metadata: metadata, msgType: msgType };",
          "tbelScript": "return {msg: msg, metadata: metadata, msgType: msgType};"
        },
        "additionalInfo": {
          "description": "",
          "layoutX": 1012,
          "layoutY": 151
        }
      }
    ],
    "connections": [
      {
        "fromIndex": 0,
        "toIndex": 2,
        "type": "Success"
      },
      {
        "fromIndex": 1,
        "toIndex": 0,
        "type": "Success"
      }
    ],
    "ruleChainConnections": null
  }
}